{% extends 'base.html.twig' %}

{% block title %}{{ 'app.rulespage.title' | trans }} - {{ parent() }}{% endblock %}

{% block content %}
    <div class="bg-primary">
        <div class="container text-justify">
            <h1>
                {{ 'app.rulespage.title' | trans }}
                <small>
                    {{ 'app.global.title' | trans }}
                </small>
            </h1>
            <p class="lead">
                The idea is quite simple: You have to <strong>create a <a href="#api-documentation">REST API</a></strong>
                to <strong>move a starship</strong> across a random generated board. In this board there are also a
                number of <strong>space invaders</strong> and the other players' starships. You could
                <strong>move</strong> or <strong>fire</strong> at any direction (up, down, left or right), but you will
                have limited shots.
            </p>
            <p class="lead">
                You will know the size of the board, the position of your character and some other data, but you won't
                see the entire board. The game engine will call your API, sending the current conditions, and your API
                will have to response with your next move: <strong>up</strong>, <strong>down</strong>, <strong>left</strong>,
                <strong>right</strong>, <strong>fire-up</strong>, <strong>fire-down</strong>, <strong>fire-left</strong>
                or <strong>fire-right</strong>.
            </p>
        </div>
    </div>

    <div class="bg-success">
        <div class="container text-justify">
            <h2>
                The game
            </h2>
            <div class="row">
                <div class="col-sm-12 col-md-6">
                    <p>
                        <img class="img-responsive" src="{{ asset('images/starship-screen01.png') }}">
                    </p>
                </div>
                <div class="col-sm-12 col-md-6">
                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/starship-player01-right.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                The <strong>Player's Starship</strong> is the character moved by the
                                <a href="#api-documentation">player's REST API</a>. The game engine can manage up to 8
                                differenct starships concurrently.
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/starship-invader01-regular.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                The <strong>Space Invaders</strong> will kill a you if they catch you. The invaders move
                                randomly across the board. The number of invaders in the game and the spawn frequency
                                can be configured and it changes from game to game.
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/starship-invader02-neutral.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                When a new space invader is born, he is <strong>neutral</strong> for some movements.
                                A neutral invader cannot kill a player, but players can kill neutral space invaders by
                                touching them. After a few movements a neutral invader becomes a regular space invader.
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/starship-explosion.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                When a player is killed, he <strong>explodes</strong>. A killed player will remain
                                dead for some movements and then he respaws in the same place where he was killed.
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/starship-shot-right.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                This is a <strong>shot</strong>. A player fired. If a shot hunts a player or an invader,
                                it kills him.
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <p class="lead">
                The game engine processes all the <strong>movements</strong> from the players and then the
                <strong>shots</strong>. So a player can dodge a shot. When all the movements and the shots are
                processed the game engine moves the <strong>invaders</strong>. So the invaders cannot dodge a shot.
            </p>

            <p class="lead">
                The shots are instantaneous, but limited to the
                <a href="#visible-area"><strong>visible area</strong></a>. If two players shot each other at the same
                time, the both die. After shoting, a player must reload and he cannot shot again until after a few
                movements.
            </p>
        </div>
    </div>

    <div class="bg-danger">
        <div class="container text-justify">
            <div class="row">
                <div class="col-xm-12 col-md-8">
                    <h2>
                        Rules
                    </h2>

                    <h3>
                        Basics
                    </h3>

                    <ul class="lead">
                        <li>
                            The <strong>Code Challenge 2018</strong> is a programming competition.
                        </li>
                        <li>
                            It's opened to <strong>all Privalia employees</strong> particularly those ones in the IT department.
                        </li>
                        <li>
                            The required <strong>programming level</strong> to participate is high.
                        </li>
                    </ul>
                </div>

                <div class="col-xs-12 col-md-4 center-block">
                    <p>&nbsp;</p>
                    <p>&nbsp;</p>
                    <img
                        src="{{ asset('images/space-invaders.png') }}"
                        alt="{{ 'app.global.name' | trans }}"
                        title="{{ 'app.global.name' | trans }}"
                        class="img-responsive"
                    />
                </div>
            </div>

            <h3>
                Join
            </h3>

            <ul class="lead">
                <li>
                    To join the challenge you'll need to <strong>upload your API to your own Internet server</strong>.
                </li>
                <li>
                    Your API has to be <strong>accessible</strong> from the game server through an URL or IP address.
                </li>
                <li>
                    No support will be given to create the API or upload it to a server.
                </li>
            </ul>

            <h3>
                Dates
            </h3>

            <ul class="lead">
                <li>
                    <strong>November 30<sup>th</sup></strong> to <strong>December 13<sup>rd</sup></strong>: Develop your API.
                </li>
                <li>
                    <strong>December 14<sup>th</sup></strong> at <strong>13:00h</strong>: Competition at Privalia training room.
                </li>
            </ul>

            <h3>
                Prizes
            </h3>

            <ul class="lead">
                <li>
                    A t-shirt for all participants.
                </li>
                <li>
                    Three special prizes for the bests.
                </li>
            </ul>

            <h3>
                Competition format
            </h3>

            <ul class="lead">
                <li>
                    The Competition format will depend on <strong>the number of participants</strong>.
                </li>
                <li>
                    The idea is to do some semifinals to discard non-optimized APIs and then a
                    <strong>big final</strong>.
                </li>
                <li>
                    The game parameters (size of the board, number of invaders, etc) will be revealed
                    the day of the competition.
                </li>
            </ul>
        </div>
    </div>

    <div class="bg-info">
        <div class="container text-justify">
            <h2 id="api-documentation">
                API Documentation
            </h2>
            <p>
                Players are simple REST APIs with <strong>two endpoints</strong>:
            </p>
            <ul>
                <li>
                    <code>/name</code>:
                    should provide basic information on a player.
                    See <a href="#name-endpoint"><strong>Name Endpoint</strong></a> for more information.
                </li>
                <li>
                    <code>/move</code>:
                    will receive map information, and needs to reply with the next move for the player.
                    See the <a href="#move-endpoint"><strong>Move Endpoint</strong></a> for more information.
                </li>
            </ul>

            <h3 id="name-endpoint">
                Name Endpoint
            </h3>
            <p>
                Your <code>/name</code> URL API will receive a <strong>POST</strong> request without body.
                Reply with JSON format indicating the <strong>name</strong> of the player or team and the contact
                <strong>email</strong>.
            </p>

            <h4>
                Request format
            </h4>

            <pre>{% include 'default/rulesEndpointNameRequest.html.twig' %}</pre>

            <h4>
                Response format
            </h4>

            <pre>{% include 'default/rulesEndpointNameResponse.html.twig' %}</pre>

            <h3 id="move-endpoint">
                Move Endpoint
            </h3>
            <p>
                Your <code>/move</code> URL API will receive a POST request with the information about the visible
                part of the map in JSON format, and you need to reply with the next movement also in JSON format.
                See <a href="#visible-area">visible area</a> section for more information.
            </p>

            <h4>
                Request format
            </h4>

            <pre>{% include 'default/rulesEndpointMoveRequest.html.twig' %}</pre>

            <h4>
                Response format
            </h4>

            <pre>{% include 'default/rulesEndpointMoveResponse.html.twig' %}</pre>
        </div>

        <div class="bg-warning">
            <div class="container text-justify">
                <h2 id="visible-area">
                    Visible area
                </h2>

                <div class="row">
                    <div class="col-sm-12 col-md-6">
                        <p class="lead">
                            The board is a 0-based matrix, where [0, 0] is the upper left corner.
                            The height and width are sent in the <code>board.size.height</code> and <code>board.size.width</code>
                            vars of the request body in the <a href="#move-endpoint">Move endpoint</a>.
                        </p>
                        <p class="lead">
                            Each player has its own <strong>visible area</strong> based on its current position
                            (see <a href="#figure-1">Figure 1</a>).
                            The visible area is sent in the <code>player.area</code> var which is an object with four vars
                            <code>y1</code>, <code>x1</code>, <code>y2</code> and <code>x2</code>.
                        </p>
                        <p class="lead">
                            The information sent in <code>board.walls</code>, <code>invaders</code> and <code>players</code> vars
                            depends on the <strong>visible area</strong>.
                        </p>
                        <p class="lead">
                            The <strong>fire range</strong> also depends on the <strong>visible area</strong>. You can
                            shot at any straight direction (up, down, left or right) and the fire range is limited to
                            what you can see.
                        </p>
                    </div>
                    <div class="col-sm-12 col-md-6">
                        <img class="img-responsive" src="{{ asset('images/starship-screen02.png') }}">
                        <div class="text-center small" id="figure-1">
                            <i>Figure 1: Visible area</i>
                        </div>
                    </div>
                </div>

                <h3>
                    Example of request
                </h3>

                <pre>{% include 'default/rulesEndpointMoveRequestExample.html.twig' %}</pre>

                <h3>
                    Example of response
                </h3>

                <pre>{% include 'default/rulesEndpointMoveResponseExample.html.twig' %}</pre>
            </div>
        </div>

    </div>
{% endblock %}
